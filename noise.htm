<canvas id="gc" width="1000" height="1000"></canvas>
<script>
GS=10;
TC=100;

Gradient = new Array(TC + 1);
for (var i = 0; i < Gradient.length; i++)
{
	Gradient[i] = new Array(TC + 1);
	for(var j = 0; j < Gradient[i].length; j++)
	{
		Gradient[i][j] = new Array(2);
		for (var k = 0; k < Gradient[i][j].length; k++)
		{
			Gradient[i][j][k] = Math.random();
		}
	}
}

window.onload = function()
{
	canv=document.getElementById("gc");
	ctx=canv.getContext("2d");
	
	var min_perlin = 100;
	Grid = new Array(TC);
	for (var i = 0; i < Grid.length; i++)
	{
		Grid[i] = new Array(TC);
		for(var j = 0; j < Grid[i].length; j++)
		{
			Grid[i][j] = perlin(i/GS, j/GS); 
			if (Grid[i][j] < min_perlin) {min_perlin = Grid[i][j];}
		}
	}
	
	var max_grid = 0;
	for (var i = 0; i < Grid.length; i++)
	{
		for(var j = 0; j < Grid[i].length; j++)
		{
			Grid[i][j] = Grid[i][j] + Math.abs(min_perlin); 
			Grid[i][j] *= GS;
			if (Grid[i][j] > max_grid) {max_grid = Grid[i][j];}
			console.log("value: " + i + ", " + j + " - " + Grid[i][j]);
		}
	}
	
	for (var i = 0; i < Grid.length; i++)
	{
		for(var j = 0; j < Grid[i].length; j++)
		{
			ctx.fillStyle = "rgb(" + Math.floor(255/max_grid * Grid[i][j]) + ", " + Math.floor(255/max_grid * Grid[i][j]) + ", " + Math.floor(255/max_grid * Grid[i][j]) + ")";
			ctx.fillRect(i * GS, j * GS, GS, GS);
		}
	}
}
// Function to linearly interpolate between a0 and a1
// Weight w should be in the range [0.0, 1.0]
function lerp(a0, a1, w)
{
	return (1.0 - w) * a0 + w * a1;
}

// Computes the dot product of the distance and gradient vectors.
function dotGridGradient(ix, iy, x, y)
{
	// Precomputed (or otherwise) gradient vectors at each grid node
	// Gradient[IYMAX][IXMAX][2];
	
	// Compute the distance vector
	var dx = x - ix;
	var dy = y - iy;
	
	// Compute the dot-product
	console.log("consolelog " + ix + " " + iy);
	return (dx * Gradient[ix][iy][0] + dy * Gradient[ix][iy][1]);
}

// Compute Perlin noise at coordinates x, y
function perlin(x, y) 
{

	// Determine grid cell coordinates
	var x0 = Math.floor(x);
	var x1 = x0 + 1;
	var y0 = Math.floor(y);
	var y1 = y0 + 1;

	// Determine interpolation weights
	// Could also use higher order polynomial/s-curve here
	var sx = x - x0;
	var sy = y - y0;

	// Interpolate between grid point gradients
	var n0, n1, ix0, ix1, value;
	n0 = dotGridGradient(x0, y0, x, y);
	n1 = dotGridGradient(x1, y0, x, y);
	ix0 = lerp(n0, n1, sx);
	n0 = dotGridGradient(x0, y1, x, y);
	n1 = dotGridGradient(x1, y1, x, y);
	ix1 = lerp(n0, n1, sx);
	value = lerp(ix0, ix1, sy);
	
	return value;
}
</script>